#!/bin/bash

found=0

## Function to detect if the device has USB debugging enabled
find_adb() {
devices=$(adb devices)

if (echo $devices | grep -q "device$"); then
	found=1
fi

}

## Function to detect if the device is in recovery
find_fastboot() {
devices=$(fastboot devices)

if (echo $devices | grep -q "fastboot$"); then
	found=1
fi
}

## Function to detect if the device is in recovery mode
find_recovery() {
devices=$(adb devices)

if (echo $devices | grep -q "recovery$"); then
	found=1
fi
}

## Function to push a file to the device via adb
adb_send_file() {
adb push backup/$1 /sdcard/RaymondBackup/$1
adb push backup/$1.md5 /sdcard/RaymondBackup/$1.md5
}

wait_for_adb() {
	# Find adb
	echo "Looking for ADB..."
	until [ $found -eq 1 ]; do
		sleep 1
		find_adb
	done
	found=0
}

wait_for_fastboot() {
	# Find fastboot
	echo "Looking for fastboot..."
	until [ $found -eq 1 ]; do
		sleep 1
		find_fastboot
	done
	found=0
}

wait_for_recovery() {
	# Find recovery
	echo "Looking for recovery..."
	until [ $found -eq 1 ]; do
		sleep 1
		find_recovery
	done
	found=0
}

imgnex_reboot_to_bootloader() {
	# Wait for ADB
	wait_for_adb
	# Reboot to bootloader
	adb reboot bootloader
}

imgnex_unlock_bootloader () {
	# Wait for fastboot
	wait_for_fastboot

	# Unlock bootloader
	echo "Found fastboot! Unlocking bootloader!"
	fastboot oem unlock
	fastboot continue
}

imgnex_flash_recovery () {
	wait_for_adb
	adb reboot bootloader
	# Done unlocking. Flash recovery!
	echo "Flashing recovery..."
	fastboot flash recovery recovery.img

	# Boot into recovery
	echo "Booting into recovery..."
	fastboot boot recovery.img
}

imgnex_send_backup () {
	wait_for_recovery
	# Push our backup over
	echo "Pushing our backup to the device!"
	adb shell "mkdir /sdcard/RaymondBackup"
	adb_send_file system.ext4.win
	adb_send_file data.ext4.win
	adb_send_file boot.emmc.win
	adb_send_file recovery.emmc.win
}

imgnex_create_recovery_script () {
# Write our open recovery script via adb
echo "Creating /cache/recovery/openrecoveryscript..."
	adb shell "mkdir /cache/recovery"
	adb shell "echo wipe cache >> /cache/recovery/openrecoveryscript"
	adb shell "echo wipe data >> /cache/recovery/openrecoveryscript"
	adb shell "echo wipe dalvik >> /cache/recovery/openrecoveryscript"
	adb shell "echo restore /sdcard/RaymondBackup >> /cache/recovery/openrecoveryscript"
	adb shell "echo cmd rm -r /sdcard/RaymondBackup >> /cache/recovery/openrecoveryscript"
	adb reboot recovery
}

imgnex_workflow_finished() {
	echo "At this time you can unplug your device. The image will be restoring so make sure you have enough battery! Feel free to run this command again to image another device."
	aplay /usr/lib/libreoffice/share/gallery/sounds/cow.wav
}

case "$1" in

full)   echo "Will run the full workflow"
	imgnex_reboot_to_bootloader
	imgnex_unlock_bootloader
	imgnex_flash_recovery
	imgnex_send_backup
	imgnex_create_recovery_script
	imgnex_workflow_finished
	exit
	;;
unlock) echo "Starting workflow at bootloader unlock!"
	imgnex_unlock_bootloader
	imgnex_flash_recovery
	imgnex_send_backup
	imgnex_create_recovery_script
	imgnex_workflow_finished
	exit
	;;
recovery) echo "Starting workflow at recovery flashing!"
	imgnex_flash_recovery
	imgnex_send_backup
	imgnex_create_recovery_script
	imgnex_workflow_finished
	exit
	;;
upload) echo "Starting workflow by first sending the backup!"
	imgnex_send_backup
	imgnex_create_recovery_script
	imgnex_workflow_finished
	exit
	;;
restore) echo "Starting the workflow by creating our recovery script!"
	imgnex_create_recovery_script
	imgnex_workflow_finished
	exit
	;;
*)      echo "imgnex -- Nexus device imaging script"
	echo "Created by Pat Hartl (pat@pathartl.me)"
	echo "Usage:"
	echo "imgnex full"
	echo "   Runs full workflow from the beginning"
	echo "imgnex unlock"
	echo "   Starts workflow at the bootloader unlock if already in the bootloader."
	echo "imgnex recovery"
	echo "   Starts workflow at recovery flash stage if already in the bootloader."
	echo "imgnex upload"
	echo "   Starts workflow by sending the backup. Must be in recovery!"
	echo "imgnex restore"
	echo "   Starts workflow by creating recovery script and then initiating the restore."
	exit
esac
